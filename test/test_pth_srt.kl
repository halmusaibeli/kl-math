PROGRAM test_pth_srt
%NOLOCKGROUP

%include systemvars.klt

--path sorting template
%include testpath.klt

--array sorting template
%define class_name tstarr
%include testarr.klt

%ifdef array_type_define
array_type_define
%endif

VAR
    frm : XYZWPR
    list : call_path_type(LISTHEADER,LISTTYPE)
    arr : ARRAY[10] OF ARRAYTYPE
    b : ARRAY[2] OF BOOLEAN


%include systemlib.klh
%include kunit.klh

%class tstsort('pathsort.klc','pathsort.klh','testpath.klt')

%class tstarr('arraysort.klc','arraysort.klh','testarr.klt')

ROUTINE clear_path(p : call_path_type(LISTHEADER,LISTTYPE) )
  VAR
    i, status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
      DELETE_NODE(p,i,status)
        i = i - 1
	  ENDWHILE
  END clear_path

ROUTINE clear_arr (a : ARRAY[*] OF ARRAYTYPE)
  VAR
    i : INTEGER
    uninita : ARRAYTYPE
  BEGIN
    FOR i=1 TO ARRAY_LEN(a) DO
      a[i] = uninita
    ENDFOR
  END clear_arr

ROUTINE append_nodes(p : call_path_type(LISTHEADER,LISTTYPE); nodes : INTEGER)
  VAR
    i, status : INTEGER
  BEGIN
    FOR i=1 TO nodes DO
      APPEND_NODE(p,status)
    ENDFOR
  END append_nodes

ROUTINE t_arr_quick : BOOLEAN
  VAR
%define max_i 7
    i : INTEGER
    act_arr : ARRAY[max_i] OF INTEGER
    exp_arr : ARRAY[max_i] OF INTEGER
  BEGIN
    clear_arr(arr)
    
    arr[1].coords = VEC(0,1,0) ; arr[1].priority = 4 ;
    arr[2].coords = VEC(1,0,0) ; arr[2].priority = 2 ;
    arr[3].coords = VEC(0,0,1) ; arr[3].priority = 6 ;
    arr[4].coords = VEC(0,0,0) ; arr[4].priority = 1 ;
    arr[5].coords = VEC(-1,0,0) ; arr[5].priority = 3 ; 
    arr[6].coords = VEC(0,0,-1) ; arr[6].priority = 7 ;
    arr[7].coords = VEC(0,-1,0) ; arr[7].priority = 5 ;

    tstarr__quicksort(arr, 1, max_i, FALSE)

    FOR i=1 TO max_i DO
      act_arr[i] = arr[i].priority
    ENDFOR

    exp_arr[1] = 1 ; exp_arr[2] = 2 ; exp_arr[3] = 3 ; exp_arr[4] = 4 ;
    exp_arr[5] = 5 ; exp_arr[6] = 6 ; exp_arr[7] = 7 ;

    RETURN(kunit_eq_ari(exp_arr, act_arr) )

  END t_arr_quick

ROUTINE t_arr_bubb : BOOLEAN
  VAR
%define max_i 7
    i : INTEGER
    act_arr : ARRAY[max_i] OF INTEGER
    exp_arr : ARRAY[max_i] OF INTEGER
  BEGIN
    clear_arr(arr)
    
    arr[1].coords = VEC(0,1,0) ; arr[1].priority = 4 ;
    arr[2].coords = VEC(1,0,0) ; arr[2].priority = 2 ;
    arr[3].coords = VEC(0,0,1) ; arr[3].priority = 6 ;
    arr[4].coords = VEC(0,0,0) ; arr[4].priority = 1 ;
    arr[5].coords = VEC(-1,0,0) ; arr[5].priority = 3 ; 
    arr[6].coords = VEC(0,0,-1) ; arr[6].priority = 7 ;
    arr[7].coords = VEC(0,-1,0) ; arr[7].priority = 5 ;

    tstarr__bubblesort(arr, 1, max_i, TRUE)

    FOR i=1 TO max_i DO
      act_arr[i] = arr[i].priority
    ENDFOR

    exp_arr[1] = 1 ; exp_arr[2] = 2 ; exp_arr[3] = 3 ; exp_arr[4] = 4 ;
    exp_arr[5] = 5 ; exp_arr[6] = 6 ; exp_arr[7] = 7 ;

    RETURN(kunit_eq_ari(exp_arr, act_arr) )

  END t_arr_bubb

ROUTINE t_path_quick : BOOLEAN
  VAR
%define max_i 7
    i : INTEGER
    act_arr : ARRAY[max_i] OF XYZWPR
    exp_arr : ARRAY[max_i] OF XYZWPR
  BEGIN
    --add nodes
    clear_path(list)
    append_nodes(list, 10)

    frm = ZEROPOS(1)
    frm.p = -45 ; frm.r = 45

    list[1].node_pos = frm:POS(0,0,0,0,0,0, (ZEROPOS(1).Config_data))   -- line length 0mm
    list[10].node_pos = frm:POS(100,0,0,0,0,0, (ZEROPOS(1).Config_data)) -- line length 100mm
    list[8].node_pos = frm:POS(300,0,0,0,0,0, (ZEROPOS(1).Config_data)) -- line length 300mm
    list[2].node_pos = frm:POS(500,0,0,0,0,0, (ZEROPOS(1).Config_data)) -- line length 500mm
    list[4].node_pos = frm:POS(580,0,0,0,0,0, (ZEROPOS(1).Config_data)) -- line length 580mm
    list[6].node_pos = frm:POS(650,0,0,0,0,0, (ZEROPOS(1).Config_data)) -- line length 650mm
    list[3].node_pos = frm:POS(700,0,0,0,0,0, (ZEROPOS(1).Config_data)) -- line length 700mm
    list[9].node_pos = frm:POS(760,0,0,0,0,0, (ZEROPOS(1).Config_data)) -- line length 760mm
    list[5].node_pos = frm:POS(850,0,0,0,0,0, (ZEROPOS(1).Config_data)) -- line length 850mm
    list[7].node_pos = frm:POS(1000,0,0,0,0,0, (ZEROPOS(1).Config_data)) -- line length 1000mm
    
    tstsort__quicksort(list, 1, PATH_LEN(list), FALSE)

    FOR i=1 TO max_i DO
      act_arr[i] = list[i].node_pos
    ENDFOR

    exp_arr[1] = frm:POS(0,0,0,0,0,0, (ZEROPOS(1).Config_data))
    exp_arr[2] = frm:POS(100,0,0,0,0,0, (ZEROPOS(1).Config_data))
    exp_arr[3] = frm:POS(300,0,0,0,0,0, (ZEROPOS(1).Config_data))
    exp_arr[4] = frm:POS(500,0,0,0,0,0, (ZEROPOS(1).Config_data))
    exp_arr[5] = frm:POS(580,0,0,0,0,0, (ZEROPOS(1).Config_data))
    exp_arr[6] = frm:POS(650,0,0,0,0,0, (ZEROPOS(1).Config_data))
    exp_arr[7] = frm:POS(700,0,0,0,0,0, (ZEROPOS(1).Config_data))

    RETURN(kunit_eq_pos(exp_arr[1], act_arr[1]) AND kunit_eq_pos(exp_arr[2], act_arr[2]) AND kunit_eq_pos(exp_arr[3], act_arr[3]) AND &
           kunit_eq_pos(exp_arr[4], act_arr[4]) AND kunit_eq_pos(exp_arr[5], act_arr[5]) AND kunit_eq_pos(exp_arr[6], act_arr[6]) AND &
           kunit_eq_pos(exp_arr[7], act_arr[7]) )
  END t_path_quick

BEGIN
  kunit_test('test array quicksort', t_arr_quick)
  kunit_test('test array bubblesort', t_arr_bubb)
  kunit_test('test path quicksort', t_path_quick)
  kunit_done
END test_pth_srt
