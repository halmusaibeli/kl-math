PROGRAM class_name
%NOLOCKGROUP
%COMMENT = 'sort path structs'

%include namespace.m

-- declare type
%include define_type.m

%include systemlib.types.klt

--print user defined struct
%ifdef array_type_define
array_type_define
%endif

%include math.klh
%include arraysort.klh


%ifdef define_callback
define_callback
%else
%error 'define_callback: callback function must be defined in template file for comparing nodes.'
%endif

--comparator = TRUE : >, comparator = FALSE : <
ROUTINE glt(type1, type2 : ARRAYTYPE; comparator : BOOLEAN) : BOOLEAN
  BEGIN
    --run user defined callback
    --for evaluating the two nodes
    IF comparator THEN
      RETURN(callback(type1) > callback(type2))
    ELSE
      RETURN(callback(type1) < callback(type2))
    ENDIF
  END glt

ROUTINE eq(type1, type2 : ARRAYTYPE) : BOOLEAN
  BEGIN
    IF (ABS(callback(type2)-callback(type1)) < ARRAYEPSILON) THEN
      RETURN(TRUE)
    ENDIF

    RETURN(FALSE)
  END eq

ROUTINE partition
  VAR
    i,j : INTEGER
    pivot, swap : ARRAYTYPE
    status : INTEGER
  BEGIN
    pivot = list[high]

    i = low - 1
    FOR j = low TO (high-1) DO
      --place all elements less than pivot to the left
      --keeping track of partition index
      IF glt(list[j], list[high], comparator) THEN
        i = i + 1
        swap = list[i]
        list[i] = list[j]
        list[j] = swap
      ENDIF
    ENDFOR
    --put pivot into partition index
    swap = list[i+1]
    list[i+1] = list[high]
    list[high] = swap

    RETURN(i+1)

  END partition

ROUTINE quicksort
  VAR
    part_i : INTEGER
  BEGIN
    IF (low < high) THEN
      part_i = partition(list, low, high, comparator)

      quicksort(list, low, part_i - 1, comparator) --before part
      quicksort(list, part_i + 1, high, comparator) --after part
    ENDIF
  END quicksort

ROUTINE bubblesort
  VAR
    i,j : INTEGER
    n : INTEGER
    swap : ARRAYTYPE
  BEGIN
    n = high
    FOR i=low TO high DO
      FOR j=low TO n-1 DO
        IF glt(list[j], list[j+1], comparator) THEN
          swap = (list[j+1])
          list[j+1] = (list[j])
          list[j] = swap
        ENDIF
      ENDFOR
      n = n - 1
    ENDFOR
  END bubblesort

ROUTINE remove_duplicates
  VAR
    i,j : INTEGER
    blank : ARRAYTYPE
  BEGIN
    --return if 0 or 1 elements
    IF (high-low) < 2 THEN
      RETURN(high)
    ENDIF

    -- if two elements are different copy the first.
    -- if two elements are the same skip the copy
    j = 1
    FOR i=low TO high - 1 DO
      IF (NOT eq(list[i], list[i+1])) THEN
        list[j] = list[i]
        j = j + 1
      ENDIF
    ENDFOR

    -- make sure to add the last element
    list[j] = list[high]

    --uninitialize left over elements
    IF j < high THEN
      FOR i=j+1 TO high DO
        list[i] = blank
      ENDFOR
    ENDIF 

    RETURN(j)

  END remove_duplicates


ROUTINE keep_unique
  VAR
    i,j : INTEGER
    b : BOOLEAN
    blank : ARRAYTYPE
  BEGIN
    --return if 0 or 1 elements
    IF (high-low) < 2 THEN
      RETURN(high)
    ENDIF

    -- initialize flag if at end of array in loop
    b = FALSE

    -- if two elements are different copy the first.
    -- if two elements are the same skip the copy
    j = 1
    i=low
    WHILE i < high DO
      IF eq(list[i], list[i+1]) THEN
        REPEAT
          i = i + 1
          IF i = high THEN
            b = TRUE
          ELSE
            b = (NOT eq(list[i], list[i+1]))
          ENDIF
        UNTIL(b)
      ELSE
        --add to list in unequal
        list[j] = list[i]
        j = j + 1
      ENDIF

      i = i + 1
    ENDWHILE

    -- make sure to add the last element if not a duplicate
    IF (NOT eq(list[high-1], list[high])) THEN
      list[j] = list[high]
    ELSE
      j = j - 1
    ENDIF

    --if all elements are duplicates. Do not remove anything
    -- ..warning:: A hack for the draw module so that a clipped
    --             line with duplicate start and end points
    --             does not get deleted. Still delete duplicates.
    IF j = 0 THEN
      IF (high-low > 4) THEN
        RETURN(keep_unique(list, low+1, high-1))
      ELSE
        --RETURN(high)
        RETURN(remove_duplicates(list, low, high))
      ENDIF
    ENDIF 

    --uninitialize left over elements
    IF j < high THEN
      FOR i=j+1 TO high DO
        list[i] = blank
      ENDFOR
    ENDIF 

    RETURN(j)

  END keep_unique

BEGIN
END class_name
