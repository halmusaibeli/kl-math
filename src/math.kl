PROGRAM math
%NOBUSYLAMP
%COMMENT = 'math library'

%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR

%include errors.klt
%include math.private.klt
%include math.klt

%include math.private.klh
%include math.builtins.klh
%include math.klh

%include errors.klh
%from strings.klh %import lstrip

--built ins
ROUTINE math__abs
  BEGIN
    RETURN(ABS(val))
  END math__abs

ROUTINE math__exp
  BEGIN
    RETURN(EXP(val))
  END math__exp

ROUTINE math__sqrt
  BEGIN
    RETURN(SQRT(val))
  END math__sqrt

ROUTINE math__atan2
  BEGIN
    RETURN(ATAN2(ajacent, opposite))
  END math__atan2

ROUTINE math__atan_pos
  BEGIN
    RETURN(ATAN2(pose.x, pose.y))
  END math__atan_pos


--opts
ROUTINE math__pow
  BEGIN
    RETURN(EXP(exponent * LN(value)))
  END math__pow

ROUTINE math__log10
  BEGIN
    RETURN(LN(num)/M_LN10)
  END math__log10

ROUTINE math__log2
  BEGIN
    RETURN(LN(num)/M_LN2)
  END math__log2

ROUTINE math__floor
  VAR
    trun_num : INTEGER
  BEGIN
    trun_num = TRUNC(num)
    IF trun_num <= 0 THEN
      trun_num = trun_num - 1
    ENDIF
    RETURN(trun_num)
  END math__floor

ROUTINE math__ceil
  VAR
    trun_num : INTEGER
  BEGIN
    trun_num = TRUNC(num)
    IF trun_num >= 0 THEN
      trun_num = trun_num + 1
    ENDIF
    RETURN(trun_num)
  END math__ceil

ROUTINE math__round
  BEGIN
    IF (ABS(num) - TRUNC(ABS(num))) >=0.5 THEN
      RETURN(math__ceil(num))
    ELSE
      RETURN(math__floor(num))
    ENDIF
  END math__round

ROUTINE math_decimal
  VAR
    s : STRING[16]
    rNum : REAL
    i : INTEGER
    
  BEGIN
    IF UNINIT(num) THEN
            RETURN(0)
    ENDIF
    CNV_REAL_STR(num,0, digits, s)
    s = lstrip(s)

      -- fix -.234 issue
      IF SUB_STR(s,1,1) = '-' THEN
        -- see if next char is .
        IF SUB_STR(s,2,1) = '.' THEN
          s = '-0.' + SUB_STR(s,3,STR_LEN(s))
        ENDIF
      ENDIF

      -- add leading zero
      IF SUB_STR(s,1,1) = '.' THEN
        s = '0' + s
      ENDIF
      
      -- return back to real number
      CNV_STR_REAL(s, rNum)
      
      IF UNINIT(rNum) THEN
        karelError(EXPECTED_REAL, s + ' is not an number', 2)
      ENDIF
      
      RETURN(rNum) 
  END math_decimal
  
--array math
ROUTINE math__max_int
  VAR
    max : INTEGER
    i   : INTEGER
  BEGIN
    max = numbers[1]
    FOR i=1 TO ARRAY_LEN(numbers) DO
      IF numbers[i] > max THEN
        max = numbers[i]
      ENDIF
    ENDFOR

    RETURN(max)
  END math__max_int

ROUTINE math__max_real
  VAR
    max : REAL
    i   : INTEGER
  BEGIN
    max = numbers[1]
    FOR i=1 TO ARRAY_LEN(numbers) DO
      IF numbers[i] > max THEN
        max = numbers[i]
      ENDIF
    ENDFOR

    RETURN(max)
  END math__max_real

ROUTINE math__min_int
  VAR
    min : INTEGER
    i   : INTEGER
  BEGIN
    min = numbers[1]
    FOR i=1 TO ARRAY_LEN(numbers) DO
      IF numbers[i] < min THEN
        min = numbers[i]
      ENDIF
    ENDFOR

    RETURN(min)
  END math__min_int

ROUTINE math__min_real
  VAR
    min : REAL
    i   : INTEGER
  BEGIN
    min = numbers[1]
    FOR i=1 TO ARRAY_LEN(numbers) DO
      IF numbers[i] < min THEN
        min = numbers[i]
      ENDIF
    ENDFOR

    RETURN(min)
  END math__min_real

ROUTINE math__sum_real
  VAR
    i   : INTEGER
    sum : REAL
  BEGIN
    sum = 0
    FOR i=1 TO ARRAY_LEN(numbers) DO
      -- exclude unitialized values from array
      IF NOT UNINIT(numbers[i]) THEN
        sum = sum + numbers[i]
      ENDIF
    ENDFOR

    RETURN(sum)
  END math__sum_real

ROUTINE math__average_real
  VAR
    i,n  : INTEGER
    ave : REAL
  BEGIN
    ave = 0
    --actual number count
    n = 0
    FOR i=1 TO ARRAY_LEN(numbers) DO
      -- exclude unitialized values from array
      IF NOT UNINIT(numbers[i]) THEN
        ave = ave + numbers[i]
        n = n + 1
      ENDIF
    ENDFOR

    IF (n = 0) THEN
      RETURN(0)
    ENDIF

    ave = ave/n
    RETURN(ave)
  END math__average_real

ROUTINE math__map_real
  BEGIN
    RETURN((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min)
  END math__map_real

ROUTINE math__map_int
  BEGIN
    RETURN(TRUNC((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min))
  END math__map_int


ROUTINE math__srand
  BEGIN
    m_seed = seed MOD (M_MODULUS-1)
  END math__srand


ROUTINE math__rand
  VAR
    seed : INTEGER
  BEGIN
    seed = (m_seed*M_MULTIPLIER + M_INCREMENT) MOD M_MODULUS
    RETURN(ABS(seed/65535.0))
  END math__rand


ROUTINE math__rand_range
  BEGIN
    RETURN(math__map_real(math__rand, 0, 1, min, max))
  END math__rand_range


ROUTINE math__rand_int
  BEGIN
    RETURN(math__map_int(math__rand, 0, 1, 0, MAX_INT))
  END math__rand_int


ROUTINE math__rand_color
  BEGIN
    RETURN(math__map_int(math__rand, 0, 1, 0, MAX_BYTE))
  END math__rand_color


ROUTINE math__rand_position
  VAR
    i :INTEGER
    pos : XYZWPR
  BEGIN
    -- use a 300mm cubed box
    FOR i=1 TO 6 DO
      math__srand(seed*i)
      SELECT i OF
        CASE (1):
         pos.x = math__rand_range(0, 300)
        CASE (2):
         pos.y = math__rand_range(0, 300)
        CASE (3):
         pos.z = math__rand_range(0, 300)
        CASE (4):
         pos.w = math__rand_range(0, 90)
        CASE (5):
         pos.p = math__rand_range(0, 90)
        CASE (6):
         pos.r = math__rand_range(0, 90)
      ENDSELECT
    ENDFOR

    RETURN(pos)
  END math__rand_position


ROUTINE math__rand_vector
  VAR
    i :INTEGER
    v : VECTOR
  BEGIN
    -- use a 300mm cubed box
    FOR i=1 TO 3 DO
      math__srand(seed*i)
      SELECT i OF
        CASE (1):
         v.x = math__rand_range(0, 300)
        CASE (2):
         v.y = math__rand_range(0, 300)
        CASE (3):
         v.z = math__rand_range(0, 300)
      ENDSELECT
    ENDFOR

    RETURN(v)
  END math__rand_vector


ROUTINE math__rand_rarr
  VAR
    i :INTEGER
  BEGIN
    FOR i=1 TO ARRAY_LEN(out_arr) DO
      math__srand(seed*i)
      out_arr[i] = math__rand
    ENDFOR
  END math__rand_rarr

-- vector math
ROUTINE math__norm
  BEGIN
    RETURN(SQRT(v.x*v.x + v.y*v.y + v.z*v.z))
  END math__norm

ROUTINE math__norm2
  BEGIN
    RETURN(v.x*v.x + v.y*v.y + v.z*v.z)
  END math__norm2

ROUTINE math__proj
  BEGIN
    RETURN( (v@ax)/math__norm2(ax)*ax )
  END math__proj

ROUTINE math__proj_orthoganal
  BEGIN
    RETURN( v - math__proj(v, ax) )
  END math__proj_orthoganal

ROUTINE math__proj_length
  BEGIN
    RETURN( ABS(v@ax)/math__norm(ax) )
  END math__proj_length
  

-- matrix convolutions
ROUTINE math__translate
  VAR
    mat_trans : XYZWPR
  BEGIN
    --initialize
    mat_trans.x = amount.x; mat_trans.y = amount.y ; mat_trans.z = amount.z;
    mat_trans.w = 0; mat_trans.p = 0 ; mat_trans.r = 0;
    --multiply
    RETURN(pos:mat_trans)
  END math__translate

ROUTINE math__rotx
  VAR
    mat_rot : XYZWPR
  BEGIN
    --initialize
    mat_rot.x = 0; mat_rot.y = 0 ; mat_rot.z = 0;
    mat_rot.w = angle; mat_rot.p = 0 ; mat_rot.r = 0;
    --multiply
    RETURN(pos:mat_rot)
  END math__rotx

ROUTINE math__roty
  VAR
    mat_rot : XYZWPR
  BEGIN
    --initialize
    mat_rot.x = 0; mat_rot.y = 0 ; mat_rot.z = 0;
    mat_rot.w = 0; mat_rot.p = angle ; mat_rot.r = 0;
    --multiply
    RETURN(pos:mat_rot)
  END math__roty

ROUTINE math__rotz
  VAR
    mat_rot : XYZWPR
  BEGIN
    --initialize
    mat_rot.x = 0; mat_rot.y = 0 ; mat_rot.z = 0;
    mat_rot.w = 0; mat_rot.p = 0 ; mat_rot.r = angle;
    --multiply
    RETURN(pos:mat_rot)
  END math__rotz

BEGIN
END math
